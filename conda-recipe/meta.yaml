{% set REPO_NAME   = environ.get('REPO_NAME',  '') %}
{% set VERSION     = environ.get('VERSION',    '') %}
{% set TAR_URL     = environ.get('TAR_URL',    '') %}
{% set SHA256      = environ.get('SHA256',     '') %}
{% set REPO_HOME   = environ.get('REPO_HOME',  '') %}

package:
  name: {{ REPO_NAME }}
  version: {{ VERSION }}

source:
  url:   {{ TAR_URL }}
  sha256: {{ SHA256 }}

build:
  skip: true  # [win]
  detect_python: False
  # ------------------------------------------------------------
  # 1) Build C++ with CMake, 2) Run CTest to exercise C++ tests,
  # 3) If CTest passes, install the binary into $PREFIX/bin
  # ------------------------------------------------------------
  script: |
    mkdir build
    cd build
    
    # Configure & compile
    cmake .. -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_BUILD_TYPE=Release
    cmake --build . --parallel ${CPU_COUNT:-1}
    
    # Run C++ unit tests via CTest (fail the build if any test fails)
    ctest --output-on-failure
    
    cmake --install . --prefix $PREFIX
    cd ..
  number: 0

requirements:
  build:
    - {{ compiler("cxx") }}
    - cmake
  host:
    # This environment only needs to run CMake and the C++ compiler
    - {{ compiler("cxx") }}
    - cmake

outputs:
  # ---------------------------------------------------------
  # Output #1: Arch‐specific C++ executable (aligncount-cpp)
  # ---------------------------------------------------------
  - name: aligncount_cpp
    requirements:
      host:
        - {{ compiler("cxx") }}
        - cmake
      run:
        - libcxx   # [osx]
        - libgcc-ng  # [linux]

  # ---------------------------------------------------------
  # Output #2: Noarch Python wrapper (aligncount_demo)
  # ---------------------------------------------------------
  - name: aligncount
    build:
      noarch: python
      script: |
        python -m pip install "$SRC_DIR/cli" --no-deps --ignore-installed --prefix=$PREFIX

    requirements:
      build:
        - python >=3.9,<3.14
        - pip
        - setuptools
      host:
        - python >=3.9,<3.14
        - pip
        - setuptools
      run:
        - python >=3.9,<3.14
        - {{ pin_subpackage("aligncount_cpp", exact=False) }}

    test:
      requires:
        - pytest

      # Copy in Python test file(s) from the repo. At test time,
      # Conda will have already installed “aligncount” (the
      # pure-Python wrapper) into the test environment, so the
      # test can import it.
      source_files:
        - ../../tests/python/*.py

      # Invoke pytest on the copied file(s).
      commands:
        - pytest -q

about:
  home: {{ REPO_HOME }}
  license: MIT
  summary: "C++ linecount + Python wrapper"
